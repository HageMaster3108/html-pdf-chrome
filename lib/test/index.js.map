{"version":3,"sources":["test/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\n// tslint:disable:no-unused-expression\n\nimport * as chai from 'chai';\nimport * as chromeLauncher from 'chrome-launcher';\nimport * as fs from 'fs';\nimport getPort = require('get-port');\nimport * as mockFs from 'mock-fs';\nimport * as path from 'path';\nimport * as PDFParser from 'pdf2json';\nimport * as sinon from 'sinon';\nimport { Readable } from 'stream';\n\nimport * as HtmlPdf from '../src';\nimport ConsoleAPICalled from '../src/typings/chrome/Runtime/ConsoleAPICalled';\nimport ExceptionThrown from '../src/typings/chrome/Runtime/ExceptionThrown';\n\n// tslint:disable:no-var-requires\nchai.use(require('chai-string'));\nchai.use(require('sinon-chai'));\n// tslint:enable:no-var-requires\nconst expect = chai.expect;\n\ndescribe('HtmlPdf', () => {\n\n  describe('create', () => {\n    let port: number;\n    let chrome: chromeLauncher.LaunchedChrome;\n\n    before(async () => {\n      // Start Chrome and wait for it to start listening for connections.\n      chrome = await chromeLauncher.launch({\n        chromeFlags: [\n          '--disable-gpu',\n          '--headless',\n        ],\n        // uncomment if using Chrome Beta\n        // chromePath: '/usr/bin/google-chrome-beta',\n        connectionPollInterval: 250,\n        logLevel: 'error',\n        maxConnectionRetries: 50,\n      });\n      port = chrome.port;\n    });\n\n    after(async () => {\n      await chrome.kill();\n    });\n\n    it('should spawn Chrome and generate a PDF', async () => {\n      const result = await HtmlPdf.create('<p>hello!</p>');\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n    });\n\n    it('should handle a Chrome launch failure', async () => {\n      const error = new Error('failed!');\n      const launchStub = sinon.stub(chromeLauncher, 'launch').callsFake(() => Promise.reject(error));\n      try {\n        await HtmlPdf.create('<p>hello!</p>');\n        expect.fail();\n      } catch (err) {\n        expect(err).to.equal(error);\n      } finally {\n        launchStub.restore();\n      }\n    });\n\n    it('should use running Chrome to generate a PDF (specify port)', async () => {\n      const launchStub = sinon.stub(chromeLauncher, 'launch');\n      try {\n        const result = await HtmlPdf.create('<p>hello!</p>', {port});\n        expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n        expect(launchStub).to.not.have.been.called;\n        const pdf = await getParsedPdf(result.toBuffer());\n        expect(pdf.getRawTextContent()).to.startWith('hello!');\n      } finally {\n        launchStub.restore();\n      }\n    });\n\n    it('should use running Chrome to generate a PDF (specify host and port)', async () => {\n      const launchStub = sinon.stub(chromeLauncher, 'launch');\n      try {\n        const result = await HtmlPdf.create('<p>hello!</p>', {host: 'localhost', port});\n        expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n        expect(launchStub).to.not.have.been.called;\n        const pdf = await getParsedPdf(result.toBuffer());\n        expect(pdf.getRawTextContent()).to.startWith('hello!');\n      } finally {\n        launchStub.restore();\n      }\n    });\n\n    it('should generate a PDF with Chrome options', async () => {\n      const options: HtmlPdf.CreateOptions = {\n        port,\n        clearCache: true,\n        printOptions: {\n          landscape: true,\n          displayHeaderFooter: true,\n        },\n      };\n      const result = await HtmlPdf.create('<p>hello!</p>', options);\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n    });\n\n    it('should generate a PDF with cookies', async () => {\n      const options: HtmlPdf.CreateOptions = {\n        port,\n        cookies: [\n          {\n            name: 'status',\n            value: 'Passed!',\n            domain: 'westy92.github.io',\n          },\n        ],\n      };\n      const result = await HtmlPdf.create('https://westy92.github.io/html-pdf-chrome/test/cookie.html', options);\n      const pdf = await getParsedPdf(result.toBuffer());\n      expect(pdf.getRawTextContent()).to.startWith('Cookies:status=Passed!');\n    });\n\n    it('should generate a PDF and send extra HTTP headers', async () => {\n      const options: HtmlPdf.CreateOptions = {\n        port,\n        extraHTTPHeaders: {\n          'Authorization': 'Bearer',\n          'X-Custom-Test-Header': 'Passed1!',\n        },\n      };\n\n      const result = await HtmlPdf.create('https://httpbin.org/headers', options);\n      const pdf = await getParsedPdf(result.toBuffer());\n      const rawTextContent = pdf.getRawTextContent();\n\n      expect(rawTextContent).to.contain('Authorization').and.to.contain('Bearer');\n      expect(rawTextContent).to.contain('X-Custom-Test-Header').and.to.contain('Passed1!');\n    });\n\n    it('should proxy console messages', async () => {\n      const events: ConsoleAPICalled[] = [];\n      const options: HtmlPdf.CreateOptions = {\n        port,\n        runtimeConsoleHandler: (event: ConsoleAPICalled) => events.push(event),\n      };\n      const html = `\n        <html>\n          <body>\n            <script>\n              console.log('a');\n              console.warn({b: 5});\n            </script>\n          </body>\n        </html>\n      `;\n      const result = await HtmlPdf.create(html, options);\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      expect(events.length).to.equal(2);\n      expect(events[0]).to.have.property('type', 'log');\n      expect(events[0]).to.have.deep.property('args', [ { type: 'string', value: 'a' } ]);\n      expect(events[1]).to.have.property('type', 'warning');\n    });\n\n    it('should proxy unhandled exceptions', async () => {\n      const now = Date.now();\n      let caughtException: ExceptionThrown;\n      const options: HtmlPdf.CreateOptions = {\n        port,\n        runtimeExceptionHandler: (event: ExceptionThrown) => { caughtException = event; },\n      };\n      const html = `\n        <html>\n          <body>\n            <script>\n              throw new Error('Oh no!');\n            </script>\n          </body>\n        </html>\n      `;\n      const result = await HtmlPdf.create(html, options);\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      expect(caughtException).to.not.be.undefined;\n      expect(caughtException.timestamp).to.be.greaterThan(now);\n    });\n\n    it('should timeout', async () => {\n      const options: HtmlPdf.CreateOptions = {\n        port,\n        timeout: 0,\n      };\n      try {\n        await HtmlPdf.create('<p>hello!</p>', options);\n        expect.fail();\n      } catch (err) {\n        expect(err.message).to.equal('HtmlPdf.create() timed out.');\n      }\n    });\n\n    it('should fail to reach an invalid page', async () => {\n      const options: HtmlPdf.CreateOptions = {\n        port,\n      };\n      try {\n        const freePort = await getPort();\n        await HtmlPdf.create(`http://127.0.0.1:${freePort}`, options);\n        expect.fail();\n      } catch (err) {\n        expect(err.message).to.equal('HtmlPdf.create() page navigate failed.');\n      }\n    });\n\n    it('should generate a PDF with external JavaScript', async () => {\n      const html = `\n        <html>\n          <head>\n            <script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"></script>\n          </head>\n          <body>\n            <div id=\"test\">Failed!</div>\n            <script>\n              $('#test').text('Passed!');\n            </script>\n          </body>\n        </html>\n      `;\n      const result = await HtmlPdf.create(html, {port});\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      const pdf = await getParsedPdf(result.toBuffer());\n      expect(pdf.getRawTextContent()).to.startWith('Passed!');\n    });\n\n    it('should generate a PDF with external CSS', async () => {\n      const css = \"#test:before{content:'Passed!'}\";\n      const html = `\n        <html>\n          <head>\n            <link rel=\"stylesheet\" href=\"data:text/css;charset=utf-8;base64,${Buffer.from(css).toString('base64')}\">\n          </head>\n          <body>\n            <div id=\"test\"></div>\n          </body>\n        </html>\n      `;\n      const result = await HtmlPdf.create(html, {port});\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      const pdf = await getParsedPdf(result.toBuffer());\n      expect(pdf.getRawTextContent()).to.startWith('Passed!');\n    });\n\n    it('should generate a PDF with multiple pages', async () => {\n      const html = `\n        <html>\n          <body>\n            <div style=\"page-break-after:always\">Page 1</div>\n            <div>Page 2</div>\n          </body>\n        </html>\n      `;\n      const result = await HtmlPdf.create(html, {port});\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      const pdf = await getParsedPdf(result.toBuffer());\n      expect(pdf.getRawTextContent()).to.contain('Page (0) Break').and.to.contain('Page (1) Break');\n    });\n\n    it('should generate a PDF with custom headers and footers', async () => {\n      const html = `\n        <html>\n          <head>\n            <title>TITLE</title>\n          </head>\n          <body>\n            <div style=\"page-break-after:always\">P1</div>\n            <div>P2</div>\n          </body>\n        </html>\n      `;\n      const result = await HtmlPdf.create(html, {\n        port,\n        printOptions: {\n          displayHeaderFooter: true,\n          headerTemplate: `\n            <div class=\"text center\" style=\"color:red;\">\n              Custom <b>header</b>!\n              Page <span class=\"pageNumber\"></span> of <span class=\"totalPages\"></span>.\n              Title: <span class=\"title\"></span>.\n            </div>\n          `,\n          footerTemplate: '<div class=\"text center\" style=\"color:green\">Custom <i>footer</i>!</div>',\n        },\n      });\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      const pdf = await getParsedPdf(result.toBuffer());\n      const pdfText = pdf.getRawTextContent();\n      expect(pdfText).to.contain('Custom header!').and.to.contain('Custom footer!');\n      expect(pdfText).to.contain('Page 1 of 2.').and.to.contain('Page 2 of 2.');\n      expect(pdfText).to.contain('P1').and.to.contain('P2');\n      expect(pdfText).to.contain('Title: TITLE.');\n    });\n\n    it('should generate a PDF from a local file', async () => {\n      const filePath = path.join('file://', __dirname, '../../test/test.html');\n      const result = await HtmlPdf.create(filePath, {port});\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      const pdf = await getParsedPdf(result.toBuffer());\n      expect(pdf.getRawTextContent()).to.startWith('Passed!');\n    });\n\n    it('should generate a PDF from an external site', async () => {\n      const result = await HtmlPdf.create('https://m.facebook.com/', {port});\n      expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      const pdf = await getParsedPdf(result.toBuffer());\n      expect(pdf.getRawTextContent()).to.contain('Facebook');\n    });\n\n    describe('Http', async () => {\n\n      const baseOptions: HtmlPdf.CreateOptions = {\n        port,\n      };\n\n      const mockServer = require('mockttp').getLocal(); // {debug: true}\n      const mockServerPort = await getPort();\n      const mockUrl = `http://127.0.0.1:${mockServerPort}/mocked-path`;\n\n      before(() => {\n        mockServer.start(mockServerPort);\n      });\n      after(() => {\n        mockServer.stop();\n      });\n\n      it('should trigger loadingFailedHandler', (done) => {\n        const myOptions = Object.assign({}, baseOptions);\n        let alreadyReceivedLoadingFailedHandler = false;\n\n        myOptions.loadingFailedHandler = (e) => {\n          expect(e.requestId).to.not.be.null;\n          expect(e.timestamp).to.not.be.null;\n          expect(e.type).to.not.be.null;\n          alreadyReceivedLoadingFailedHandler = true;\n          done();\n        };\n\n        const html = `\n          <html>\n            <body>\n              <img src=\"http://thisdomaindoesnotexistforsureibelieveatleast.com/blah.png\">\n            </body>\n          </html>\n        `;\n\n        mockServer.get('/mocked-path')\n          .thenReply(200, html)\n          .then(async () => {\n\n            await HtmlPdf.create(mockUrl, myOptions).catch((err) => {\n              done(err);\n            }).then(() => {\n              if (!alreadyReceivedLoadingFailedHandler) {\n                done('Did not receive loadingFailedHandler call');\n              }\n            });\n\n          });\n\n      });\n\n      const statusCodeBasedTest = async (statusCodeToSend: number, expectFail: boolean, options: HtmlPdf.CreateOptions) => {\n\n        const myOptions = Object.assign({}, options);\n\n        const p = new Promise(async (resolve, reject) =>  {\n\n          mockServer.get('/mocked-path').thenReply(statusCodeToSend, 'A mocked response').then(async () => {\n            let alreadyFailed = false;\n\n            await HtmlPdf.create(mockUrl, myOptions).catch((err) => {\n              alreadyFailed = true;\n              if (!expectFail) {\n                reject(`Did not expect failure: ${err}`);\n              } else {\n                resolve();\n              }\n            }).then(() => {\n              if (alreadyFailed) {\n                return;\n              }\n              if (expectFail) {\n                reject(`create was supposed to fail but did not`);\n              } else {\n                resolve();\n              }\n            });\n\n          });\n\n        });\n\n        return p;\n      };\n\n      it('should fail on HTTP 4xx', (done) => {\n        statusCodeBasedTest(403, true, baseOptions)\n          .then(() => { done(); })\n          .catch((err) => { done(err); });\n      });\n\n      it('should fail on HTTP 5xx', (done) => {\n        statusCodeBasedTest(500, true, baseOptions)\n          .then(() => { done(); })\n          .catch((err) => { done(err); });\n      });\n\n      it('should NOT fail on HTTP 4xx if failOnHTTP5xx is false', (done) => {\n        baseOptions.failOnHTTP5xx = false;\n        statusCodeBasedTest(500, false, baseOptions)\n          .then(() => { done(); })\n          .catch((err) => { done(err); });\n      });\n\n      it('should NOT fail on HTTP 4xx if failOnHTTP4xx is false', (done) => {\n        baseOptions.failOnHTTP4xx = false;\n        statusCodeBasedTest(403, false, baseOptions)\n          .then(() => { done(); })\n          .catch((err) => { done(err); });\n      });\n\n      it('should trigger requestWillBeSentHandler', (done) => {\n        const myOptions = Object.assign({}, baseOptions);\n        let alreadyReceivedRequestWillBeSentHandler = false;\n        myOptions.requestWillBeSentHandler = (e) => {\n          expect(e.initiator).to.not.null;\n          expect(e.requestId).to.not.null;\n          expect(e.loaderId).to.not.null;\n          expect(e.timestamp).to.not.null;\n          expect(e.wallTime).to.not.null;\n          expect(e.request).to.not.null;\n          done();\n          alreadyReceivedRequestWillBeSentHandler = true;\n        };\n\n        mockServer.get('/mocked-path')\n          .thenReply(200, 'A mocked response')\n          .then(async () => {\n\n            await HtmlPdf.create(mockUrl, myOptions).catch((err) => {\n              done(err);\n            }).then(() => {\n              if (!alreadyReceivedRequestWillBeSentHandler) {\n                done('Did not receive requestWillBeSentHandler call');\n              }\n            });\n          });\n\n      });\n\n    });\n\n    describe('CompletionTrigger', () => {\n\n      const timeoutErrorMessage = 'CompletionTrigger timed out.';\n\n      describe('Timer', () => {\n\n        const html = `\n          <html>\n            <body>\n              <div id=\"test\">Failed!</div>\n              <script>\n                setTimeout(() => {\n                  document.getElementById('test').innerHTML = 'Passed!';\n                }, 200);\n              </script>\n            </body>\n          </html>\n        `;\n\n        it('should generate prematurely without a CompletionTrigger', async () => {\n          const result = await HtmlPdf.create(html, {port});\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Failed!');\n        });\n\n        it('should generate correctly after being triggered', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Timer(300),\n          };\n          const result = await HtmlPdf.create(html, options);\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Passed!');\n        });\n\n      });\n\n      describe('Event', () => {\n\n        const html = `\n          <html>\n            <body>\n              <div id=\"test\">Failed!</div>\n              <script>\n                setTimeout(() => {\n                  document.getElementById('test').innerHTML = 'Passed!';\n                  document.body.dispatchEvent(new Event('myEvent'));\n                }, 200);\n              </script>\n            </body>\n          </html>\n        `;\n\n        it('should generate prematurely without a CompletionTrigger', async () => {\n          const result = await HtmlPdf.create(html, {port});\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Failed!');\n        });\n\n        it('should time out', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Event('myEvent', null, 1),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should time out from listening to the wrong event', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Event('myEvent', '#test', 300),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should generate correctly after being triggered', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Event('myEvent'),\n          };\n          const result = await HtmlPdf.create(html, options);\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Passed!');\n        });\n\n      });\n\n      describe('Callback', () => {\n\n        const html = `\n          <html>\n            <body>\n              <div id=\"test\">Failed!</div>\n              <script>\n                setTimeout(() => {\n                  document.getElementById('test').innerHTML = 'Timeout!';\n                  if (window.htmlPdfCb) {\n                    document.getElementById('test').innerHTML = 'Callback!';\n                    htmlPdfCb();\n                  }\n                }, 200);\n              </script>\n            </body>\n          </html>\n        `;\n\n        it('should generate prematurely without a CompletionTrigger', async () => {\n          const result = await HtmlPdf.create(html, {port});\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Failed!');\n        });\n\n        it('should time out', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Callback(null, 1),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should time out from listening to the wrong callback', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Callback('wrongCb', 300),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should generate correctly after being triggered', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Callback(),\n          };\n          const result = await HtmlPdf.create(html, options);\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Callback!');\n        });\n\n      });\n\n      describe('Element', () => {\n\n        const html = `\n          <html>\n            <body>\n              <div id=\"test\">Failed!</div>\n              <script>\n                setTimeout(() => {\n                  const inserted = document.createElement('div');\n                  inserted.id = 'inserted';\n                  inserted.innerText = 'Passed!';\n                  document.body.insertBefore(inserted, document.getElementById('test'));\n                }, 200);\n              </script>\n            </body>\n          </html>\n        `;\n\n        it('should generate prematurely without a CompletionTrigger', async () => {\n          const result = await HtmlPdf.create(html, {port});\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Failed!');\n        });\n\n        it('should time out', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Element('div#inserted', 1),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should time out from listening for the wrong element', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Element('div#derp', 300),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should generate correctly after being triggered', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Element('div#inserted'),\n          };\n          const result = await HtmlPdf.create(html, options);\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Passed!');\n        });\n\n      });\n\n      describe('Variable', () => {\n\n        const html = `\n          <html>\n            <body>\n              <div id=\"test\">Failed!</div>\n              <script>\n                setTimeout(() => {\n                  document.getElementById('test').innerHTML = 'Variable!';\n                  htmlPdfDone = true;\n                }, 200);\n              </script>\n            </body>\n          </html>\n        `;\n\n        it('should generate prematurely without a CompletionTrigger', async () => {\n          const result = await HtmlPdf.create(html, {port});\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Failed!');\n        });\n\n        it('should time out', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Variable(null, 1),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should time out from listening to the wrong variable', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Variable('wrongVar', 300),\n          };\n          try {\n            await HtmlPdf.create(html, options);\n            expect.fail();\n          } catch (err) {\n            expect(err.message).to.equal(timeoutErrorMessage);\n          }\n        });\n\n        it('should generate correctly after being triggered', async () => {\n          const options: HtmlPdf.CreateOptions = {\n            port,\n            completionTrigger: new HtmlPdf.CompletionTrigger.Variable(),\n          };\n          const result = await HtmlPdf.create(html, options);\n          expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n          const pdf = await getParsedPdf(result.toBuffer());\n          expect(pdf.getRawTextContent()).startsWith('Variable!');\n        });\n\n      });\n\n    });\n\n    describe('Concurrent PDF generation', function() {\n      this.timeout(25000);\n      async function createAndParse(index: string): Promise<string> {\n        const html = `<p>${index}</p>`;\n        const result = await HtmlPdf.create(html, { port });\n        const parsed = await getParsedPdf(result.toBuffer());\n        const regex = /^(\\d+)\\r\\n----------------Page \\(0\\) Break----------------\\r\\n$/;\n        return (regex.exec(parsed.getRawTextContent()) || [])[1];\n      }\n\n      const length = 10;\n      it(`should concurrently generate ${length} PDFs`, async () => {\n        const input = Array.from({length}, (_, i) => `${i}`);\n        const results = await Promise.all(input.map(createAndParse));\n        expect(results).to.deep.equal(input);\n      });\n    });\n\n  });\n\n  describe('CreateResult', () => {\n\n    const testBase64 = Buffer.from('test').toString('base64');\n\n    describe('constructor', () => {\n      it('should instanciate', () => {\n        const result = new HtmlPdf.CreateResult('');\n        expect(result).to.be.an.instanceOf(HtmlPdf.CreateResult);\n      });\n    });\n\n    describe('toBase64', () => {\n      it('should output a base64 string', () => {\n        const cr = new HtmlPdf.CreateResult(testBase64);\n        expect(cr.toBase64()).to.equal(testBase64);\n      });\n    });\n\n    describe('toBuffer', () => {\n      it('should output a Buffer', () => {\n        const cr = new HtmlPdf.CreateResult(testBase64);\n        expect(cr.toBuffer()).to.deep.equal(Buffer.from('test'));\n      });\n    });\n\n    describe('toStream', () => {\n      it('should output a Readable Stream', () => {\n        const cr = new HtmlPdf.CreateResult(testBase64);\n        const stream = cr.toStream();\n        expect(stream).to.be.an.instanceOf(Readable);\n      });\n\n      it('should output a valid Stream', (done) => {\n        const cr = new HtmlPdf.CreateResult(testBase64);\n        const stream = cr.toStream();\n        let bytes = Buffer.from('');\n        stream.on('data', (chunk) => {\n          bytes = Buffer.concat([bytes, chunk]);\n        });\n        stream.on('end', () => {\n          try {\n            expect(bytes).to.deep.equal(cr.toBuffer());\n            done();\n          } catch (err) {\n            done(err);\n          }\n        });\n      });\n    });\n\n    describe('toFile', () => {\n      it('should output a file', async () => {\n        try {\n          mockFs({\n            myDir: {},\n          });\n          const cr = new HtmlPdf.CreateResult(testBase64);\n          const filePath = 'myDir/file.pdf';\n          await cr.toFile(filePath);\n          const stats = fs.statSync(filePath);\n          expect(stats.isFile()).to.be.true;\n          expect(stats.isDirectory()).to.be.false;\n          expect(stats.size).to.be.greaterThan(0);\n        } finally {\n          mockFs.restore();\n        }\n      });\n\n      it('should fail output to a nonexistent directory', async () => {\n        try {\n          mockFs();\n          const cr = new HtmlPdf.CreateResult(testBase64);\n          await cr.toFile('myDir/file.pdf');\n          expect.fail();\n        } catch (err) {\n          expect(err.message).to.contain('no such file or directory');\n        } finally {\n          mockFs.restore();\n        }\n      });\n    });\n\n  });\n\n});\n\nasync function getParsedPdf(buffer: Buffer): Promise<any> {\n  return new Promise((resolve, reject) => {\n    const pdfParser = new PDFParser(null, 1);\n    pdfParser.on('pdfParser_dataError', (err) => reject(err.parserError));\n    pdfParser.on('pdfParser_dataReady', () => resolve(pdfParser));\n    pdfParser.parseBuffer(buffer);\n  });\n}\n"],"sourceRoot":"../.."}